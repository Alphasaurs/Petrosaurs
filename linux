 basic linux file permissions are read ,write, execute
l -ld ?? directory
man ls ?just like ls --help cmd but it show in a good manner
ls -l ?additional information of directories with folder 
ls -la or ls -l-a ?all hidden files also
mkdir my\java or mkdir "my java" or mkdir 'my java' or mkkdir my/ java ?? spaced folder name
nano cool.txt ?? ^k-caret K i.e CTRL+K
Emacs ??the extensible, customizable, self-documenting real-time display editor,
NOTE-learn emacs and vim as they are essential
touch filename ??make new file
 mv /home/user/Images/Vacation.JPG . ??this command will move .jpg to current directory(. is used for that)
rm -r directoryname ??delete non empty directory
////////////////////////
NOTE - grep flags
-r: search recursively
-w: match the whole word
-n: only in line number
-e: match pattern
--include and --exclude: include and exclude files in the search
--include-dir and --exclude-dir: include or exclude directories in the search
//////////////////////////////////////////
COMPUTER MANAGEMENT
the name of the first user that gets created on a Linux machine, the OS superuser--root
sudo su - ??running root user command su is substitute user but dont always be in there
sudo cat /etc/ sudoers ?? running single commmand
/etc/group file ?? to see group user
->sudo:x:27:cindy ??there are 4 fields:sudo is group name,x is group encrypted password,27 is group id,cindy is user
/etc/password ?? to see user
root:x:0:0:root:/root/:/bin/bash ?? root is user ,x is password ,0:0 is userid,root is user
/////////////////////////////////////////////
FILE PERMISSION
ls -l ~/directory
>>drwxr-xr-x 5 rusto rusto 4096??there are 10 bits first d=directory, other 9 are divided into three parts which is rwx :r-read,w=write,x=execute,-=this function is disable
ls -l ~/file
>>-rwxr-xr-x 5 rusto rusto 4096?? same as above but first - is file
/////////////////////////////////////////////
LINUX MODIFYING PERMISSION
NOTE: u=owner,g=group,o=other user,chmod=change mode
this are the symbolic formats for LINUX MODIFYING PERMISSION
sudo chmod u+x filename ??this will add execute permission for owner
sudo chmod g+x filename ??this will add execute permission for group
sudo chmod o+x filename ??this will add execute permission for other
sudo chmod u-x filename ??above vice versa
sudo chmod u+rx filename ??this will add execute and read permission
sudo chmod ugo+r filename ?? ugo is owner,group,other user will give read permission
sudo chmod a+r not_so_important_document ??This adds read permission to everyone (owner, group, and other).
sudo chmod 777 not_so_important_document ??same as above but in numerical way

this are the numerical representation for LINUX MODIFYING PERMISSION it is faster than previous one
4=r,2=w,1=x
chmod 754 filename ??
>>-rwx-xr--1 cool cool_group 0 oct  ?? 7 denotes rwx for owner ,5 denotes xr for group ,4 denotes  r for other,--1 denotes permission to all other user

sudo chown rusto fileneame ?? change owner permission from cool to rusto 
sudo chgrp anothrgroup filename ?? change group permission from cool to anothrgroup
sudo chmod 720 secret_folder/ ??this mean chmod is applied on a directory 7 permission (rwx) given to owner,2 permission(w) given to group , 0 no permission to other user

///////////////////////////////
When using chmod on a directory, files within that directory are not affected. 
linux special permission
SETUID-special permission bit is used to allow a file to be run as the owner of the file
sudo chmod u+s filename ?? s denotes setuid
>>-rwsr-xr-x 1 cool
sudo 4755 filename ?? same command as above but numerical way
SETGID-special permission bit is used to allow a file to be run as the whole group user of the file
sudo chmod g+s filename 
>>-rwsr-xr-x 1 cool group
sudo 2755 filename ?? same command as above but numerical way
sticky bit allows the file to be modified by anyone, but only removed by the owner or root.
sudo chmod +t filename ?? t denotes sticky bit
sudo 1755 filename ?? same command as above but numerical way









